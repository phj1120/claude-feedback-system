#!/bin/bash
###
### Stop Hook - Claude 응답 완료 시 CSV 업데이트
###

# 프로젝트 .claude 디렉토리 경로
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLAUDE_DIR="$(dirname "$SCRIPT_DIR")"

# 입력 데이터 읽기
INPUT=$(cat)

# 디버깅: 입력 데이터 로그
{
    echo "=== Stop Hook Debug Log ==="
    echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
    echo "Input JSON:"
    echo "$INPUT"
    echo ""
} > "$CLAUDE_DIR/logs/stop-hook-debug.log"

# 세션 정보 로드
SESSION_FILE="$CLAUDE_DIR/temp/current-session.json"
if [ ! -f "$SESSION_FILE" ]; then
    # 세션 정보가 없으면 종료 (프롬프트 제출 없이 실행된 경우)
    exit 0
fi

SESSION_ID=$(python3 -c "import json; f=open('$SESSION_FILE'); d=json.load(f); print(d['session_id'])")

# Transcript 파일 경로 추출 - 가장 최근 파일을 사용
ORIGINAL_TRANSCRIPT=$(echo "$INPUT" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('transcript_path', ''))" 2>/dev/null || echo "")

# 무조건 가장 최근 수정된 transcript 파일 사용
TRANSCRIPT_PATH=$(ls -t "$HOME/.claude/projects/-Users-parkh-Dev-git-Project-vibe-pay/"*.jsonl 2>/dev/null | head -1)

# 디버깅: transcript 정보
{
    echo "Original transcript: $ORIGINAL_TRANSCRIPT"
    echo "Using transcript: $TRANSCRIPT_PATH"
    echo "File size: $(wc -c < "$TRANSCRIPT_PATH" 2>/dev/null || echo 0) bytes"
} >> "$CLAUDE_DIR/logs/stop-hook-debug.log"

# 응답 내용 추출 (transcript에서 마지막 assistant 메시지)
RESPONSE=""
TOOLS_USED=""
TOOLS_COUNT=0

if [ -n "$TRANSCRIPT_PATH" ] && [ -f "$TRANSCRIPT_PATH" ]; then
    # Python 스크립트로 transcript 파싱
    RESPONSE=$(python3 "$SCRIPT_DIR/stop-parse-transcript.py" "$TRANSCRIPT_PATH")

    # JSON 파싱
    CLAUDE_RESPONSE=$(echo "$RESPONSE" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('response', ''))")
    TOOLS_USED=$(echo "$RESPONSE" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('tools_used', ''))")
    TOOLS_COUNT=$(echo "$RESPONSE" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('tools_count', 0))")

    # 디버깅: 파싱 결과
    {
        echo ""
        echo "Parsed response length: ${#CLAUDE_RESPONSE}"
        echo "Response preview: ${CLAUDE_RESPONSE:0:200}"
        echo "Tools used: $TOOLS_USED"
        echo "Tools count: $TOOLS_COUNT"
    } >> "$CLAUDE_DIR/logs/stop-hook-debug.log"
fi

# 소요 시간 계산 (대략적)
START_TIME=$(python3 -c "import json; f=open('$SESSION_FILE'); d=json.load(f); print(d['timestamp'])")
END_TIME=$(date '+%Y-%m-%d %H:%M:%S')

# 초 단위 계산
DURATION=$(python3 -c "from datetime import datetime; start=datetime.strptime('$START_TIME', '%Y-%m-%d %H:%M:%S'); end=datetime.strptime('$END_TIME', '%Y-%m-%d %H:%M:%S'); print(int((end-start).total_seconds()))")

# CSV 업데이트 (응답 정보)
python3 "$SCRIPT_DIR/csv-updater.py" update-response "$SESSION_ID" "$CLAUDE_RESPONSE" "$DURATION" "$TOOLS_USED" "$TOOLS_COUNT"

# 현재 응답의 세션 정보를 SESSION_FILE에 저장 (다음 만족도 평가를 위해)
cat > "$SESSION_FILE" << EOF
{
  "session_id": "$SESSION_ID",
  "timestamp": "$END_TIME",
  "project_path": "$(pwd)"
}
EOF

# 피드백 안내 메시지 (JSON으로 반환)
cat << 'EOFMSG'
{
  "decision": "proceed",
  "message": "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n💡 만족도 평가: 다음 프롬프트에 1-5 입력\n[1] ⭐ 매우 별로 [2] ⭐⭐ 별로 [3] ⭐⭐⭐ 중간\n[4] ⭐⭐⭐⭐ 좋음 [5] ⭐⭐⭐⭐⭐ 매우 좋음\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}
EOFMSG

exit 0