#!/bin/bash
###
### UserPromptSubmit Hook - 사용자 프롬프트를 CSV에 저장 또는 피드백 처리
###

# 입력 데이터 읽기 (stdin으로 JSON 형태로 전달됨)
INPUT=$(cat)

# 필요한 정보 추출
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
# Claude에서 전달하는 session_id 사용
SESSION_ID=$(echo "$INPUT" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('session_id', ''))" 2>/dev/null || echo "")
if [ -z "$SESSION_ID" ]; then
    SESSION_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
fi
PROJECT_PATH=$(pwd)

# JSON에서 user_prompt 추출 (jq 사용, 없으면 Python fallback)
if command -v jq &> /dev/null; then
    USER_PROMPT=$(echo "$INPUT" | jq -r '.user_input // .prompt // ""' 2>/dev/null || echo "")
else
    # jq가 없으면 Python으로 파싱
    USER_PROMPT=$(echo "$INPUT" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('user_input', data.get('prompt', '')))" 2>/dev/null || echo "")
fi

# 프롬프트가 비어있으면 stdin 전체를 사용
if [ -z "$USER_PROMPT" ]; then
    USER_PROMPT="$INPUT"
fi

# 프로젝트 .claude 디렉토리 경로
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLAUDE_DIR="$(dirname "$SCRIPT_DIR")"

# 세션 정보 파일
SESSION_FILE="$CLAUDE_DIR/temp/current-session.json"

# 피드백 패턴 체크 (1-5 숫자만)
TRIMMED_PROMPT=$(echo "$USER_PROMPT" | xargs)

# 디버그 로그
{
    echo "=== User Prompt Submit Debug ==="
    echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "USER_PROMPT: [$USER_PROMPT]"
    echo "TRIMMED_PROMPT: [$TRIMMED_PROMPT]"
    echo "Pattern match: $([[ "$TRIMMED_PROMPT" =~ ^[1-5]$ ]] && echo 'YES' || echo 'NO')"
    echo "SESSION_FILE exists: $([ -f "$SESSION_FILE" ] && echo 'YES' || echo 'NO')"
    if [ -f "$SESSION_FILE" ]; then
        echo "SESSION_FILE content:"
        cat "$SESSION_FILE"
    fi
    echo ""
} >> "$CLAUDE_DIR/logs/user-prompt-submit-debug.log"

if [[ "$TRIMMED_PROMPT" =~ ^[1-5]$ ]]; then
    # 이전 세션 정보 확인
    if [ -f "$SESSION_FILE" ]; then
        PREV_SESSION_ID=$(python3 -c "import json; f=open('$SESSION_FILE'); d=json.load(f); print(d['session_id'])" 2>/dev/null)

        {
            echo "PREV_SESSION_ID: [$PREV_SESSION_ID]"
        } >> "$CLAUDE_DIR/logs/user-prompt-submit-debug.log"

        if [ -n "$PREV_SESSION_ID" ]; then
            # 피드백 저장
            python3 "$SCRIPT_DIR/csv-updater.py" update-satisfaction "$PREV_SESSION_ID" "$TRIMMED_PROMPT" "" > /dev/null 2>&1

            {
                echo "Satisfaction saved for session: $PREV_SESSION_ID"
            } >> "$CLAUDE_DIR/logs/user-prompt-submit-debug.log"

            # 세션 정보 삭제
            rm -f "$SESSION_FILE"

            # Claude 호출을 완전히 차단하고 메시지만 표시
            cat << EOF
{
  "decision": "block",
  "reason": "✅ 만족도 평가가 저장되었습니다 ($TRIMMED_PROMPT/5)"
}
EOF
            exit 0
        fi
    else
        # 세션 파일이 없으면 안내 메시지만 표시하고 차단
        {
            echo "No session file - feedback ignored"
        } >> "$CLAUDE_DIR/logs/user-prompt-submit-debug.log"

        cat << EOF
{
  "decision": "block",
  "reason": "⚠️ 평가할 대화가 없습니다. 먼저 질문을 입력해주세요."
}
EOF
        exit 0
    fi
fi

# 일반 프롬프트 처리: 세션 정보를 임시 파일에 저장
cat > "$SESSION_FILE" << EOF
{
  "session_id": "$SESSION_ID",
  "timestamp": "$TIMESTAMP",
  "project_path": "$PROJECT_PATH"
}
EOF

# CSV에 새 행 추가
python3 "$SCRIPT_DIR/csv-updater.py" add "$SESSION_ID" "$TIMESTAMP" "$PROJECT_PATH" "$USER_PROMPT"

exit 0
